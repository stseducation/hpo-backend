/* This file is automatically generated by ABP framework to use MVC Controllers from JavaScript. */

var abp = abp || {};
abp.services = abp.services || {};

// module 'app'
(function(){

  abp.services.app = abp.services.app || {};

  // controller 'user'
  (function(){

    abp.services.app.user = abp.services.app.user || {};

    // action 'create'
    abp.services.app.user.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.user.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.user.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/Get' + abp.utils.buildQueryString([{ name: 'includeRoles', value: input.includeRoles }, { name: 'includeGroups', value: input.includeGroups }, { name: 'includeAlerts', value: input.includeAlerts }, { name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.user['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroups'
    abp.services.app.user.getGroups = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetGroups',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoles'
    abp.services.app.user.getRoles = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetRoles',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeLanguage'
    abp.services.app.user.changeLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ChangeLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.user.changePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.user.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.user.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'student'
  (function(){

    abp.services.app.student = abp.services.app.student || {};

    // action 'createFromDevice'
    abp.services.app.student.createFromDevice = function(username, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/CreateFromDevice' + abp.utils.buildQueryString([{ name: 'username', value: username }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'create'
    abp.services.app.student.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createBatch'
    abp.services.app.student.createBatch = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/CreateBatch',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.student.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.student.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/Get' + abp.utils.buildQueryString([{ name: 'includeRoles', value: input.includeRoles }, { name: 'includeGroups', value: input.includeGroups }, { name: 'includeAlerts', value: input.includeAlerts }, { name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.student['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroups'
    abp.services.app.student.getGroups = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/GetGroups',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoles'
    abp.services.app.student.getRoles = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/GetRoles',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeLanguage'
    abp.services.app.student.changeLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/ChangeLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.student.changePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/ChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.student.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.student.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Student/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'shortcut'
  (function(){

    abp.services.app.shortcut = abp.services.app.shortcut || {};

    // action 'create'
    abp.services.app.shortcut.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Shortcut/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.shortcut.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Shortcut/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.shortcut.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Shortcut/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.shortcut.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Shortcut/GetAll' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.shortcut['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Shortcut/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'session'
  (function(){

    abp.services.app.session = abp.services.app.session || {};

    // action 'getCurrentLoginInformations'
    abp.services.app.session.getCurrentLoginInformations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/GetCurrentLoginInformations',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'role'
  (function(){

    abp.services.app.role = abp.services.app.role || {};

    // action 'create'
    abp.services.app.role.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getRoles'
    abp.services.app.role.getRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoles' + abp.utils.buildQueryString([{ name: 'permission', value: input.permission }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.role.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.role['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllPermissions'
    abp.services.app.role.getAllPermissions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetAllPermissions',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoleForEdit'
    abp.services.app.role.getRoleForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoleForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.role.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.role.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'organizationUnit'
  (function(){

    abp.services.app.organizationUnit = abp.services.app.organizationUnit || {};

    // action 'create'
    abp.services.app.organizationUnit.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.organizationUnit.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.organizationUnit.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.organizationUnit.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.organizationUnit['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'tenant'
  (function(){

    abp.services.app.tenant = abp.services.app.tenant || {};

    // action 'create'
    abp.services.app.tenant.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.tenant['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.tenant.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.tenant.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.tenant.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'incident'
  (function(){

    abp.services.app.incident = abp.services.app.incident || {};

    // action 'create'
    abp.services.app.incident.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.incident.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'getRecordingUrl', value: input.getRecordingUrl }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilePath'
    abp.services.app.incident.getFilePath = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/GetFilePath' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'getRecordingUrl', value: input.getRecordingUrl }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRecordingUrl'
    abp.services.app.incident.getRecordingUrl = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/GetRecordingUrl' + abp.utils.buildQueryString([{ name: 'incidentId', value: input.incidentId }, { name: 'fileName', value: input.fileName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getByToken'
    abp.services.app.incident.getByToken = function(incidentToken, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/GetByToken' + abp.utils.buildQueryString([{ name: 'incidentToken', value: incidentToken }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateRecordingFileName'
    abp.services.app.incident.updateRecordingFileName = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/UpdateRecordingFileName',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateByToken'
    abp.services.app.incident.updateByToken = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/UpdateByToken',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getIncidentsByPeriod'
    abp.services.app.incident.getIncidentsByPeriod = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/GetIncidentsByPeriod',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.incident.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/GetAll' + abp.utils.buildQueryString([{ name: 'from', value: input.from }, { name: 'to', value: input.to }, { name: 'incidentStatuses', value: input.incidentStatuses }, { name: 'keyword', value: input.keyword }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.incident.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.incident['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Incident/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'incidentStatus'
  (function(){

    abp.services.app.incidentStatus = abp.services.app.incidentStatus || {};

    // action 'get'
    abp.services.app.incidentStatus.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IncidentStatus/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.incidentStatus.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IncidentStatus/GetAll' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'create'
    abp.services.app.incidentStatus.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IncidentStatus/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.incidentStatus.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IncidentStatus/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.incidentStatus['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IncidentStatus/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'group'
  (function(){

    abp.services.app.group = abp.services.app.group || {};

    // action 'create'
    abp.services.app.group.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Group/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.group.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Group/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.group.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Group/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.group.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Group/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.group['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Group/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'gameSession'
  (function(){

    abp.services.app.gameSession = abp.services.app.gameSession || {};

    // action 'startGameSession'
    abp.services.app.gameSession.startGameSession = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/StartGameSession',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'endGameSession'
    abp.services.app.gameSession.endGameSession = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/EndGameSession',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getGamesByDay'
    abp.services.app.gameSession.getGamesByDay = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/GetGamesByDay' + abp.utils.buildQueryString([{ name: 'gameName', value: input.gameName }, { name: 'from', value: input.from }, { name: 'to', value: input.to }, { name: 'symptoms', value: input.symptoms }, { name: 'userId', value: input.userId }, { name: 'groupId', value: input.groupId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.gameSession.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.gameSession.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/GetAll' + abp.utils.buildQueryString([{ name: 'gameName', value: input.gameName }, { name: 'from', value: input.from }, { name: 'to', value: input.to }, { name: 'symptoms', value: input.symptoms }, { name: 'userId', value: input.userId }, { name: 'groupId', value: input.groupId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'create'
    abp.services.app.gameSession.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.gameSession.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.gameSession['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GameSession/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'faculty'
  (function(){

    abp.services.app.faculty = abp.services.app.faculty || {};

    // action 'create'
    abp.services.app.faculty.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.faculty.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.faculty.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/Get' + abp.utils.buildQueryString([{ name: 'includeRoles', value: input.includeRoles }, { name: 'includeGroups', value: input.includeGroups }, { name: 'includeAlerts', value: input.includeAlerts }, { name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.faculty['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroups'
    abp.services.app.faculty.getGroups = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/GetGroups',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoles'
    abp.services.app.faculty.getRoles = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/GetRoles',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeLanguage'
    abp.services.app.faculty.changeLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/ChangeLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.faculty.changePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/ChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.faculty.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.faculty.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Faculty/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'executable'
  (function(){

    abp.services.app.executable = abp.services.app.executable || {};

    // action 'update'
    abp.services.app.executable.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.executable['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.executable.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'types', value: input.types }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllForClient'
    abp.services.app.executable.getAllForClient = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/GetAllForClient',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'cloneHostForClient'
    abp.services.app.executable.cloneHostForClient = function(hostExecutableId, markAsModified, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/CloneHostForClient' + abp.utils.buildQueryString([{ name: 'hostExecutableId', value: hostExecutableId }, { name: 'markAsModified', value: markAsModified }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'cloneHostForPortal'
    abp.services.app.executable.cloneHostForPortal = function(hostExecutableId, markAsModified, updateShortcut, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/CloneHostForPortal' + abp.utils.buildQueryString([{ name: 'hostExecutableId', value: hostExecutableId }, { name: 'markAsModified', value: markAsModified }]) + '',
        type: 'POST',
        data: JSON.stringify(updateShortcut)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.executable.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'create'
    abp.services.app.executable.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Executable/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'disposition'
  (function(){

    abp.services.app.disposition = abp.services.app.disposition || {};

    // action 'createDispositions'
    abp.services.app.disposition.createDispositions = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Disposition/CreateDispositions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.disposition.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Disposition/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.disposition.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Disposition/GetAll' + abp.utils.buildQueryString([{ name: 'from', value: input.from }, { name: 'to', value: input.to }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'create'
    abp.services.app.disposition.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Disposition/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.disposition.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Disposition/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.disposition['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Disposition/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'symptomAlert'
  (function(){

    abp.services.app.symptomAlert = abp.services.app.symptomAlert || {};

    // action 'create'
    abp.services.app.symptomAlert.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SymptomAlert/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.symptomAlert.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SymptomAlert/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.symptomAlert.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SymptomAlert/GetAll' + abp.utils.buildQueryString([{ name: 'from', value: input.from }, { name: 'to', value: input.to }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.symptomAlert.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SymptomAlert/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.symptomAlert['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SymptomAlert/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'device'
  (function(){

    abp.services.app.device = abp.services.app.device || {};

    // action 'create'
    abp.services.app.device.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createOrChangePassword'
    abp.services.app.device.createOrChangePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/CreateOrChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'reportDiskSpace'
    abp.services.app.device.reportDiskSpace = function(reportDiskSpaceInput, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/ReportDiskSpace',
        type: 'POST',
        data: JSON.stringify(reportDiskSpaceInput)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.device.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.device.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/Get' + abp.utils.buildQueryString([{ name: 'includeRoles', value: input.includeRoles }, { name: 'includeGroups', value: input.includeGroups }, { name: 'includeAlerts', value: input.includeAlerts }, { name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.device['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroups'
    abp.services.app.device.getGroups = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/GetGroups',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoles'
    abp.services.app.device.getRoles = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/GetRoles',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeLanguage'
    abp.services.app.device.changeLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/ChangeLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.device.changePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/ChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.device.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.device.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Device/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'isActive', value: input.isActive }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'deviceType'
  (function(){

    abp.services.app.deviceType = abp.services.app.deviceType || {};

    // action 'getWithShortcuts'
    abp.services.app.deviceType.getWithShortcuts = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DeviceType/GetWithShortcuts' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'create'
    abp.services.app.deviceType.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DeviceType/Create',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.deviceType.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DeviceType/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.deviceType.get = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DeviceType/Get' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.deviceType.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DeviceType/GetAll' + abp.utils.buildQueryString([{ name: 'keyword', value: input.keyword }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.deviceType['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DeviceType/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'configuration'
  (function(){

    abp.services.app.configuration = abp.services.app.configuration || {};

    // action 'changeUiTheme'
    abp.services.app.configuration.changeUiTheme = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Configuration/ChangeUiTheme',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'setBooleanSetting'
    abp.services.app.configuration.setBooleanSetting = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Configuration/SetBooleanSetting',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'clientSession'
  (function(){

    abp.services.app.clientSession = abp.services.app.clientSession || {};

    // action 'getClientSessionInfo'
    abp.services.app.clientSession.getClientSessionInfo = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClientSession/GetClientSessionInfo' + abp.utils.buildQueryString([{ name: 'appVersion', value: input.appVersion }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'account'
  (function(){

    abp.services.app.account = abp.services.app.account || {};

    // action 'isTenantAvailable'
    abp.services.app.account.isTenantAvailable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/IsTenantAvailable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'register'
    abp.services.app.account.register = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/Register',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendPasswordResetEmail'
    abp.services.app.account.sendPasswordResetEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SendPasswordResetEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'verifyPasswordResetCode'
    abp.services.app.account.verifyPasswordResetCode = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/VerifyPasswordResetCode',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.account.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'alert'
  (function(){

    abp.services.app.alert = abp.services.app.alert || {};

    // action 'getAll'
    abp.services.app.alert.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Alert/GetAll' + abp.utils.buildQueryString([{ name: 'alertType', value: input.alertType }, { name: 'from', value: input.from }, { name: 'to', value: input.to }, { name: 'longGameThreshold', value: input.longGameThreshold }, { name: 'includeOpen', value: input.includeOpen }, { name: 'includeClosed', value: input.includeClosed }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

})();
